using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Arduino_2
{
    public partial class Form1 : Form
    {
        SerialPort arduinoPort;

        public Form1()
        {
            InitializeComponent();
            arduinoPort = new SerialPort("COM3", 9600);
            arduinoPort.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // No necesitamos nada más aquí por ahora.
        }

        private void btnConnect_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (!arduinoPort.IsOpen)
                {
                    arduinoPort.Open();
                    MessageBox.Show("Conexión abierta", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (UnauthorizedAccessException)
            {
                MessageBox.Show("El puerto está en uso por otra aplicación. Por favor, ciérrala y vuelve a intentarlo.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al abrir el puerto: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnDisconnect_Click_1(object sender, EventArgs e)
        {
            if (arduinoPort.IsOpen)
            {
                arduinoPort.Close();
                MessageBox.Show("Conexión cerrada", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnSend_Click_1(object sender, EventArgs e)
        {
            string message = txtMessage.Text;
            string binaryMessage = StringToBinary(message);
            SendBinaryMessage(binaryMessage);
        }

        private string StringToBinary(string data)
        {
            StringBuilder sb = new StringBuilder();
            foreach (char c in data.ToCharArray())
            {
                sb.Append(Convert.ToString(c, 2).PadLeft(8, '0'));
            }
            return sb.ToString();
        }

        private async void SendBinaryMessage(string binaryMessage)
        {
            // Envía la señal para iniciar la transmisión
            arduinoPort.Write("4");
            await Task.Delay(2000); // Espera 2 segundos antes de comenzar la transmisión

            foreach (char bit in binaryMessage)
            {
                if (bit == '0')
                {
                    arduinoPort.Write("2");
                }
                else if (bit == '1')
                {
                    arduinoPort.Write("3");
                }
                await Task.Delay(2000); // 2 segundos de delay
            }
            arduinoPort.Write("5"); // Fin de la transmisión
        }

        private void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e)
        {
            SerialPort sp = (SerialPort)sender;
            string indata = sp.ReadExisting();
            // Aquí puedes manejar la data recibida del Arduino, si es necesario
        }
    }
}
